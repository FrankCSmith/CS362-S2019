
Unit Test 1: supplyCount Function
Testing with 2 players
adventurer supplyCount expected: 10, actual: 10
supplyCount test PASSED
great_hall supplyCount expected: 8, actual: 8
supplyCount test PASSED
feast supplyCount expected: -1, actual: -1
supplyCount test PASSED
Testing with 4 players
adventurer supplyCount expected: 10, actual: 10
supplyCount test PASSED
great_hall supplyCount expected: 12, actual: 12
supplyCount test PASSED
feast supplyCount expected: -1, actual: -1
supplyCount test PASSED
Unit Test 1: supplyCount Function: PASSED

Unit Test 2: isGameOver Function
Testing with 2 players
isGameOver just started game expected: 0, actual: 0
isGameOver test PASSED
isGameOver province supply count = 0 expected: 1, actual: 1
isGameOver test PASSED
isGameOver province supply count = 1 expected: 0, actual: 0
isGameOver test PASSED
isGameOver 3 supply count piles are at 0 expected: 1, actual: 1
isGameOver test PASSED
Unit Test 2: isGameOver Function: PASSED

Unit Test 3: whoseTurn Function
Testing with 2 players
whoseTurn just started game expected: 0, actual: 0
whoseTurn test PASSED
whoseTurn set to player2 expected: 1, actual: 1
whoseTurn test PASSED
Unit Test 3: whoseTurn Function: PASSED

Unit Test 4: getCost Function
Testing with 2 players
getCost of adventurer expected: 6, actual: 6
getCost test PASSED
getCost of outpost expected: 5, actual: 5
getCost test PASSED
Unit Test 4: getCost Function: PASSED

Card Test 1: smithy
Testing with 2 players
Correct Number of Cards Added
:Expected hand count = 8
Actual hand count = 8
PASSED
Correct Number of Cards Removed From Player Pile
:Expected deck count = 2
Actual deck count = 1
FAILED
Card Discarded After Use:
Expected discard count = 1
Actual discard count = 0
FAILED
Check State of Other Player, Hand Count
:Expected hand count = 0
Actual hand count = 0
PASSED
Check State of Other Player, Deck Count
:Expected deck count = 10
Actual deck count = 10
PASSED
Card Test 1: smithy result: FAILED

Card Test 2: adventurer
Testing with 2 players
Correct Number of Cards Added
:Expected hand count = 7
Actual hand count = -143
FAILED
Correct Number of Tresure Cards Added
:Expected treasure count = 6
Actual treasure count = 0
FAILED
Correct Number of Cards Removed From Player Pile
:Expected deck count = 3
Actual deck count = 0
FAILED
Check State of Other Player, Hand Count
:Expected hand count = 0
Actual hand count = 0
PASSED
Check State of Other Player, Deck Count
:Expected deck count = 10
Actual deck count = 10
PASSED
Card Test 2: adventurer result: FAILED

Card Test 3: village
Testing with 2 players
Correct Number of Cards Added
:Expected hand count = 6
Actual hand count = 5
FAILED
Correct Number of Cards Removed From Player Pile
:Expected deck count = 4
Actual deck count = 4
PASSED
Correct Number of Actions Added
:Expected actions count = 3
Actual actions count = 3
FAILED
Card Discarded After Use:
Expected discard count = 1
Actual discard count = 0
FAILED
Check State of Other Player, Hand Count
:Expected hand count = 0
Actual hand count = 0
PASSED
Check State of Other Player, Deck Count
:Expected deck count = 10
Actual deck count = 10
PASSED
Card Test 3: village result: FAILED

Card Test 4: great_hall
Testing with 2 players
Correct Number of Cards Added
:Expected hand count = 6
Actual hand count = 5
FAILED
Correct Number of Cards Removed From Player Pile
:Expected deck count = 4
Actual deck count = 4
PASSED
Correct Number of Actions Added
:Expected actions count = 2
Actual actions count = 2
FAILED
Card Discarded After Use:
Expected discard count = 1
Actual discard count = 0
FAILED
Check State of Other Player, Hand Count
:Expected hand count = 0
Actual hand count = 0
PASSED
Check State of Other Player, Deck Count
:Expected deck count = 10
Actual deck count = 10
PASSED
Card Test 4: great_hall result: FAILED
File 'unittest1.c'
Lines executed:74.00% of 50
Branches executed:100.00% of 14
Taken at least once:50.00% of 14
Calls executed:77.42% of 31
Creating 'unittest1.c.gcov'

File '<built-in>'
No executable lines
No branches
No calls
Removing '<built-in>.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 1
Creating 'stdio.h.gcov'

File 'unittest2.c'
Lines executed:77.50% of 40
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
Calls executed:76.19% of 21
Creating 'unittest2.c.gcov'

File '<built-in>'
No executable lines
No branches
No calls
Removing '<built-in>.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 1
Creating 'stdio.h.gcov'

File 'unittest3.c'
Lines executed:80.77% of 26
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:76.92% of 13
Creating 'unittest3.c.gcov'

File '<built-in>'
No executable lines
No branches
No calls
Removing '<built-in>.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 1
Creating 'stdio.h.gcov'

File 'unittest4.c'
Lines executed:78.26% of 23
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:76.92% of 13
Creating 'unittest4.c.gcov'

File '<built-in>'
No executable lines
No branches
No calls
Removing '<built-in>.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 1
Creating 'stdio.h.gcov'

File 'cardtest1.c'
Lines executed:83.33% of 54
Branches executed:100.00% of 12
Taken at least once:50.00% of 12
Calls executed:81.25% of 32
Creating 'cardtest1.c.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 1
Creating 'stdio.h.gcov'

File 'cardtest2.c'
Lines executed:84.38% of 64
Branches executed:78.57% of 28
Taken at least once:46.43% of 28
Calls executed:81.25% of 32
Creating 'cardtest2.c.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 1
Creating 'stdio.h.gcov'

File 'cardtest3.c'
Lines executed:84.38% of 64
Branches executed:100.00% of 14
Taken at least once:50.00% of 14
Calls executed:81.08% of 37
Creating 'cardtest3.c.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 1
Creating 'stdio.h.gcov'

File 'cardtest4.c'
Lines executed:84.38% of 64
Branches executed:100.00% of 14
Taken at least once:50.00% of 14
Calls executed:81.08% of 37
Creating 'cardtest4.c.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 1
Creating 'stdio.h.gcov'

Function 'updateCoins'
Lines executed:81.82% of 11

Function 'gainCard'
Lines executed:0.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:9.84% of 183

Function 'outpostCard'
Lines executed:0.00% of 4

Function 'ambassadorCard'
Lines executed:0.00% of 22

Function 'minionCard'
Lines executed:0.00% of 18

Function 'smithyCard'
Lines executed:100.00% of 5

Function 'adventurerCard'
Lines executed:100.00% of 15

Function 'getCost'
Lines executed:13.33% of 30

Function 'drawCard'
Lines executed:77.27% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 42

Function 'isGameOver'
Lines executed:100.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 12

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:93.55% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

Function 'printf'
Lines executed:0.00% of 5

File 'dominion.c'
Lines executed:29.66% of 580
Creating 'dominion.c.gcov'

File 'c:/mingw/include/stdio.h'
Lines executed:0.00% of 5
Creating 'stdio.h.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      420:    8:int compare(const void *a, const void *b)
        -:    9:{
      420:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      420:   12:  if (*(int *)a < *(int *)b)
      100:   13:    return -1;
      320:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        9:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        9:   48:  SelectStream(1);
        9:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        9:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        9:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       99:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      990:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      900:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        9:   76:  if (numPlayers == 2)
        -:   77:  {
        8:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
        1:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
        1:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        9:   90:  if (numPlayers == 2)
        -:   91:  {
        8:   92:    state->supplyCount[estate] = 8;
        8:   93:    state->supplyCount[duchy] = 8;
        8:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
        1:   98:    state->supplyCount[estate] = 12;
        1:   99:    state->supplyCount[duchy] = 12;
        1:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        9:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  105:  state->supplyCount[silver] = 40;
        9:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      189:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
     1485:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
     1395:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
       90:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
       36:  118:          if (numPlayers == 2)
        -:  119:          {
       16:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
        2:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
       72:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       90:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1305:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       29:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       20:  146:    state->deckCount[i] = 0;
       80:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
       60:  149:      state->deck[i][j] = estate;
       60:  150:      state->deckCount[i]++;
        -:  151:    }
      160:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
      140:  154:      state->deck[i][j] = copper;
      140:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       29:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       20:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       29:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       20:  172:    state->handCount[i] = 0;
       20:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      252:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      243:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        9:  188:  state->outpostPlayed = 0;
        9:  189:  state->phase = 0;
        9:  190:  state->numActions = 1;
        9:  191:  state->numBuys = 1;
        9:  192:  state->playedCardCount = 0;
        9:  193:  state->whoseTurn = 0;
        9:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       54:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
       45:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        9:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        9:  205:  return 0;
        -:  206:}
        -:  207:
      320:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
      320:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
      320:  216:  if (state->deckCount[player] < 1)
      300:  217:    return -1;
       20:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      240:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      200:  223:    card = floor(Random() * state->deckCount[player]);
      200:  224:    newDeck[newDeckPos] = state->deck[player][card];
      200:  225:    newDeckPos++;
      699:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
      499:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      200:  230:    state->deckCount[player]--;
        -:  231:  }
      220:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      200:  234:    state->deck[player][i] = newDeck[i];
      200:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       20:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        6:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        6:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        6:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        6:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
        4:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
        4:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
        1:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
        3:  434:  j = 0;
       78:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
       75:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
        3:  439:      j++;
        -:  440:    }
        -:  441:  }
        3:  442:  if (j >= 3)
        -:  443:  {
        1:  444:    return 1;
        -:  445:  }
        -:  446:
        2:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
      206:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
      206:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
      150:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
      150:  630:    state->deckCount[player] = state->discardCount[player];
      150:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
      150:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
      150:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
      150:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
      150:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
      150:  653:    if (deckCounter == 0)
      150:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       56:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       56:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       56:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       56:  672:    state->deckCount[player]--;
       56:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       56:  676:  return 0;
        -:  677:}
        -:  678:
        2:  679:int getCost(int cardNumber)
        -:  680:{
        2:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
        1:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
        1:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
        -:  742:/* Rewritten Functions */
        -:  743:
        -:  744:// Adventurer - mistakes must be added
        1:  745:int adventurerCard(int drawntreasure, int currentPlayer, struct gameState *state, int cardDrawn, int temphand[], int z)
        -:  746:{
      157:  747:  while (drawntreasure < 2)
        -:  748:  {
      155:  749:    if (state->deckCount[currentPlayer] < 1)
        -:  750:    { //if the deck is empty we need to shuffle discard and add to deck
      150:  751:      shuffle(currentPlayer, state);
        -:  752:    }
      155:  753:    drawCard(currentPlayer, state);
      155:  754:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        -:  755:    //if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) //correct
        -:  756:    //****************************************************************************
      155:  757:    if (cardDrawn == copper && cardDrawn == silver || cardDrawn == gold) //bug
        -:  758:                                                                         //****************************************************************************
        2:  759:      drawntreasure++;
        -:  760:    else
        -:  761:    {
      153:  762:      temphand[z] = cardDrawn;
      153:  763:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      153:  764:      z++;
        -:  765:    }
        -:  766:  }
      155:  767:  while (z - 1 >= 0)
        -:  768:  {
      153:  769:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      153:  770:    z = z - 1;
        -:  771:  }
        1:  772:  return 0;
        -:  773:}
        -:  774:
        -:  775:// Smithy - mistakes must be added
        1:  776:int smithyCard(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  777:{
        -:  778:  //+3 Cards
        -:  779:  //****************************************************************************
        -:  780:  //for (i = 0; i < 3; i++) // correct
        5:  781:  for (i = 0; i <= 3; i++) // bug
        -:  782:  //****************************************************************************
        -:  783:  {
        4:  784:    drawCard(currentPlayer, state);
        -:  785:  }
        -:  786:
        -:  787:  //discard card from hand
        1:  788:  discardCard(handPos, currentPlayer, state, 0);
        1:  789:  return 0;
        -:  790:}
        -:  791:
        -:  792:// Minion - no mistakes added
    #####:  793:int minionCard(int i, int j, int handPos, struct gameState *state, int currentPlayer, int choice1, int choice2)
        -:  794:{
        -:  795:  //+1 action
    #####:  796:  state->numActions++;
        -:  797:
        -:  798:  //discard card from hand
    #####:  799:  discardCard(handPos, currentPlayer, state, 0);
        -:  800:
    #####:  801:  if (choice1) //+2 coins
        -:  802:  {
    #####:  803:    state->coins = state->coins + 2;
        -:  804:  }
        -:  805:
    #####:  806:  else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  807:  {
        -:  808:    //discard hand
    #####:  809:    while (numHandCards(state) > 0)
        -:  810:    {
    #####:  811:      discardCard(handPos, currentPlayer, state, 0);
        -:  812:    }
        -:  813:
        -:  814:    //draw 4
    #####:  815:    for (i = 0; i < 4; i++)
        -:  816:    {
    #####:  817:      drawCard(currentPlayer, state);
        -:  818:    }
        -:  819:
        -:  820:    //other players discard hand and redraw if hand size > 4
    #####:  821:    for (i = 0; i < state->numPlayers; i++)
        -:  822:    {
    #####:  823:      if (i != currentPlayer)
        -:  824:      {
    #####:  825:        if (state->handCount[i] > 4)
        -:  826:        {
        -:  827:          //discard hand
    #####:  828:          while (state->handCount[i] > 0)
        -:  829:          {
    #####:  830:            discardCard(handPos, i, state, 0);
        -:  831:          }
        -:  832:
        -:  833:          //draw 4
    #####:  834:          for (j = 0; j < 4; j++)
        -:  835:          {
    #####:  836:            drawCard(i, state);
        -:  837:          }
        -:  838:        }
        -:  839:      }
        -:  840:    }
        -:  841:  }
    #####:  842:  return 0;
        -:  843:}
        -:  844:
        -:  845:// Ambassador - mistake added
    #####:  846:int ambassadorCard(int i, int j, int choice1, int choice2, int handPos, struct gameState *state, int currentPlayer)
        -:  847:{
    #####:  848:  j = 0; //used to check if player has enough cards to discard
        -:  849:
    #####:  850:  if (choice2 > 2 || choice2 < 0)
        -:  851:  {
    #####:  852:    return -1;
        -:  853:  }
        -:  854:
        -:  855:  //****************************************************************************
        -:  856:  //if (choice1 == handPos) //correct
    #####:  857:  if (choice1 != handPos) // bug
        -:  858:  //****************************************************************************
        -:  859:  {
    #####:  860:    return -1;
        -:  861:  }
        -:  862:
    #####:  863:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  864:  {
    #####:  865:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  866:    {
    #####:  867:      j++;
        -:  868:    }
        -:  869:  }
    #####:  870:  if (j < choice2)
        -:  871:  {
    #####:  872:    return -1;
        -:  873:  }
        -:  874:
        -:  875:  if (DEBUG)
        -:  876:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  877:
        -:  878:  //increase supply count for choosen card by amount being discarded
    #####:  879:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  880:
        -:  881:  //each other player gains a copy of revealed card
    #####:  882:  for (i = 0; i < state->numPlayers; i++)
        -:  883:  {
    #####:  884:    if (i != currentPlayer)
        -:  885:    {
    #####:  886:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  887:    }
        -:  888:  }
        -:  889:
        -:  890:  //discard played card from hand
    #####:  891:  discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:  //trash copies of cards returned to supply
    #####:  894:  for (j = 0; j < choice2; j++)
        -:  895:  {
    #####:  896:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:    {
    #####:  898:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  899:      {
    #####:  900:        discardCard(i, currentPlayer, state, 1);
    #####:  901:        break;
        -:  902:      }
        -:  903:    }
        -:  904:  }
        -:  905:
    #####:  906:  return 0;
        -:  907:}
        -:  908:
        -:  909:// Outpost card - mistake added to outpostPlayed from ++ to --
    #####:  910:int outpostCard(int handPos, int currentPlayer, struct gameState *state)
        -:  911:{
        -:  912:  //set outpost flag
        -:  913:  //state->outpostPlayed++; //correct
        -:  914:  //****************************************************************************
    #####:  915:  state->outpostPlayed--; // bug
        -:  916:  //****************************************************************************
        -:  917:
        -:  918:  //discard card
    #####:  919:  discardCard(handPos, currentPlayer, state, 0);
    #####:  920:  return 0;
        -:  921:}
        -:  922:
        4:  923:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  924:{
        -:  925:  int i;
        -:  926:  int j;
        -:  927:  int k;
        -:  928:  int x;
        -:  929:  int index;
        4:  930:  int currentPlayer = whoseTurn(state);
        4:  931:  int nextPlayer = currentPlayer + 1;
        -:  932:
        4:  933:  int tributeRevealedCards[2] = {-1, -1};
        -:  934:  int temphand[MAX_HAND]; // moved above the if statement
        4:  935:  int drawntreasure = 0;
        -:  936:  int cardDrawn;
        4:  937:  int z = 0; // this is the counter for the temp hand
        4:  938:  if (nextPlayer > (state->numPlayers - 1))
        -:  939:  {
    #####:  940:    nextPlayer = 0;
        -:  941:  }
        -:  942:
        -:  943:  //uses switch to select card and perform actions
        4:  944:  switch (card)
        -:  945:  {
        -:  946:  case adventurer:
        1:  947:    return adventurerCard(drawntreasure, currentPlayer, state, cardDrawn, temphand, z);
        -:  948:    /*while (drawntreasure < 2)
        -:  949:    {
        -:  950:      if (state->deckCount[currentPlayer] < 1)
        -:  951:      { //if the deck is empty we need to shuffle discard and add to deck
        -:  952:        shuffle(currentPlayer, state);
        -:  953:      }
        -:  954:      drawCard(currentPlayer, state);
        -:  955:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        -:  956:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  957:        drawntreasure++;
        -:  958:      else
        -:  959:      {
        -:  960:        temphand[z] = cardDrawn;
        -:  961:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  962:        z++;
        -:  963:      }
        -:  964:    }
        -:  965:    while (z - 1 >= 0)
        -:  966:    {
        -:  967:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        -:  968:      z = z - 1;
        -:  969:    }
        -:  970:    return 0;*/
        -:  971:
        -:  972:  case council_room:
        -:  973:    //+4 Cards
    #####:  974:    for (i = 0; i < 4; i++)
        -:  975:    {
    #####:  976:      drawCard(currentPlayer, state);
        -:  977:    }
        -:  978:
        -:  979:    //+1 Buy
    #####:  980:    state->numBuys++;
        -:  981:
        -:  982:    //Each other player draws a card
    #####:  983:    for (i = 0; i < state->numPlayers; i++)
        -:  984:    {
    #####:  985:      if (i != currentPlayer)
        -:  986:      {
    #####:  987:        drawCard(i, state);
        -:  988:      }
        -:  989:    }
        -:  990:
        -:  991:    //put played card in played card pile
    #####:  992:    discardCard(handPos, currentPlayer, state, 0);
        -:  993:
    #####:  994:    return 0;
        -:  995:
        -:  996:  case feast:
        -:  997:    //gain card with cost up to 5
        -:  998:    //Backup hand
    #####:  999:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -: 1000:    {
    #####: 1001:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####: 1002:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -: 1003:    }
        -: 1004:    //Backup hand
        -: 1005:
        -: 1006:    //Update Coins for Buy
    #####: 1007:    updateCoins(currentPlayer, state, 5);
    #####: 1008:    x = 1; //Condition to loop on
    #####: 1009:    while (x == 1)
        -: 1010:    { //Buy one card
    #####: 1011:      if (supplyCount(choice1, state) <= 0)
        -: 1012:      {
        -: 1013:        if (DEBUG)
        -: 1014:          printf("None of that card left, sorry!\n");
        -: 1015:
        -: 1016:        if (DEBUG)
        -: 1017:        {
        -: 1018:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1019:        }
        -: 1020:      }
    #####: 1021:      else if (state->coins < getCost(choice1))
        -: 1022:      {
    #####: 1023:        printf("That card is too expensive!\n");
        -: 1024:
        -: 1025:        if (DEBUG)
        -: 1026:        {
        -: 1027:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1028:        }
        -: 1029:      }
        -: 1030:      else
        -: 1031:      {
        -: 1032:
        -: 1033:        if (DEBUG)
        -: 1034:        {
        -: 1035:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1036:        }
        -: 1037:
    #####: 1038:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####: 1039:        x = 0;                                      //No more buying cards
        -: 1040:
        -: 1041:        if (DEBUG)
        -: 1042:        {
        -: 1043:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1044:        }
        -: 1045:      }
        -: 1046:    }
        -: 1047:
        -: 1048:    //Reset Hand
    #####: 1049:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -: 1050:    {
    #####: 1051:      state->hand[currentPlayer][i] = temphand[i];
    #####: 1052:      temphand[i] = -1;
        -: 1053:    }
        -: 1054:    //Reset Hand
        -: 1055:
    #####: 1056:    return 0;
        -: 1057:
        -: 1058:  case gardens:
    #####: 1059:    return -1;
        -: 1060:
        -: 1061:  case mine:
    #####: 1062:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1063:
    #####: 1064:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1065:    {
    #####: 1066:      return -1;
        -: 1067:    }
        -: 1068:
    #####: 1069:    if (choice2 > treasure_map || choice2 < curse)
        -: 1070:    {
    #####: 1071:      return -1;
        -: 1072:    }
        -: 1073:
    #####: 1074:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -: 1075:    {
    #####: 1076:      return -1;
        -: 1077:    }
        -: 1078:
    #####: 1079:    gainCard(choice2, state, 2, currentPlayer);
        -: 1080:
        -: 1081:    //discard card from hand
    #####: 1082:    discardCard(handPos, currentPlayer, state, 0);
        -: 1083:
        -: 1084:    //discard trashed card
    #####: 1085:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:    {
    #####: 1087:      if (state->hand[currentPlayer][i] == j)
        -: 1088:      {
    #####: 1089:        discardCard(i, currentPlayer, state, 0);
    #####: 1090:        break;
        -: 1091:      }
        -: 1092:    }
        -: 1093:
    #####: 1094:    return 0;
        -: 1095:
        -: 1096:  case remodel:
    #####: 1097:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -: 1098:
    #####: 1099:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -: 1100:    {
    #####: 1101:      return -1;
        -: 1102:    }
        -: 1103:
    #####: 1104:    gainCard(choice2, state, 0, currentPlayer);
        -: 1105:
        -: 1106:    //discard card from hand
    #####: 1107:    discardCard(handPos, currentPlayer, state, 0);
        -: 1108:
        -: 1109:    //discard trashed card
    #####: 1110:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1111:    {
    #####: 1112:      if (state->hand[currentPlayer][i] == j)
        -: 1113:      {
    #####: 1114:        discardCard(i, currentPlayer, state, 0);
    #####: 1115:        break;
        -: 1116:      }
        -: 1117:    }
        -: 1118:
    #####: 1119:    return 0;
        -: 1120:
        -: 1121:  case smithy:
        1: 1122:    return smithyCard(i, currentPlayer, state, handPos);
        -: 1123:    /*
        -: 1124:    //+3 Cards
        -: 1125:    for (i = 0; i < 3; i++)
        -: 1126:    {
        -: 1127:      drawCard(currentPlayer, state);
        -: 1128:    }
        -: 1129:    //discard card from hand
        -: 1130:    discardCard(handPos, currentPlayer, state, 0);
        -: 1131:    return 0;
        -: 1132:    */
        -: 1133:
        -: 1134:  case village:
        -: 1135:    //+1 Card
        1: 1136:    drawCard(currentPlayer, state);
        -: 1137:
        -: 1138:    //+2 Actions
        1: 1139:    state->numActions = state->numActions + 2;
        -: 1140:
        -: 1141:    //discard played card from hand
        1: 1142:    discardCard(handPos, currentPlayer, state, 0);
        1: 1143:    return 0;
        -: 1144:
        -: 1145:  case baron:
    #####: 1146:    state->numBuys++; //Increase buys by 1!
    #####: 1147:    if (choice1 > 0)
        -: 1148:    {                             //Boolean true or going to discard an estate
    #####: 1149:      int p = 0;                  //Iterator for hand!
    #####: 1150:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1151:      while (card_not_discarded)
        -: 1152:      {
    #####: 1153:        if (state->hand[currentPlayer][p] == estate)
        -: 1154:        {                    //Found an estate card!
    #####: 1155:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1156:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1157:          state->discardCount[currentPlayer]++;
    #####: 1158:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1159:          {
    #####: 1160:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1161:          }
    #####: 1162:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1163:          state->handCount[currentPlayer]--;
    #####: 1164:          card_not_discarded = 0; //Exit the loop
        -: 1165:        }
    #####: 1166:        else if (p > state->handCount[currentPlayer])
        -: 1167:        {
        -: 1168:          if (DEBUG)
        -: 1169:          {
        -: 1170:            printf("No estate cards in your hand, invalid choice\n");
        -: 1171:            printf("Must gain an estate if there are any\n");
        -: 1172:          }
    #####: 1173:          if (supplyCount(estate, state) > 0)
        -: 1174:          {
    #####: 1175:            gainCard(estate, state, 0, currentPlayer);
    #####: 1176:            state->supplyCount[estate]--; //Decrement estates
    #####: 1177:            if (supplyCount(estate, state) == 0)
        -: 1178:            {
    #####: 1179:              isGameOver(state);
        -: 1180:            }
        -: 1181:          }
    #####: 1182:          card_not_discarded = 0; //Exit the loop
        -: 1183:        }
        -: 1184:
        -: 1185:        else
        -: 1186:        {
    #####: 1187:          p++; //Next card
        -: 1188:        }
        -: 1189:      }
        -: 1190:    }
        -: 1191:
        -: 1192:    else
        -: 1193:    {
    #####: 1194:      if (supplyCount(estate, state) > 0)
        -: 1195:      {
    #####: 1196:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1197:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1198:        if (supplyCount(estate, state) == 0)
        -: 1199:        {
    #####: 1200:          isGameOver(state);
        -: 1201:        }
        -: 1202:      }
        -: 1203:    }
        -: 1204:
    #####: 1205:    return 0;
        -: 1206:
        -: 1207:  case great_hall:
        -: 1208:    //+1 Card
        1: 1209:    drawCard(currentPlayer, state);
        -: 1210:
        -: 1211:    //+1 Actions
        1: 1212:    state->numActions++;
        -: 1213:
        -: 1214:    //discard card from hand
        1: 1215:    discardCard(handPos, currentPlayer, state, 0);
        1: 1216:    return 0;
        -: 1217:
        -: 1218:  case minion:
    #####: 1219:    return minionCard(i, j, handPos, state, currentPlayer, choice1, choice2);
        -: 1220:    /*
        -: 1221:    //+1 action
        -: 1222:    state->numActions++;
        -: 1223:    //discard card from hand
        -: 1224:    discardCard(handPos, currentPlayer, state, 0);
        -: 1225:    if (choice1) //+2 coins
        -: 1226:    {
        -: 1227:      state->coins = state->coins + 2;
        -: 1228:    }
        -: 1229:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1230:    {
        -: 1231:      //discard hand
        -: 1232:      while (numHandCards(state) > 0)
        -: 1233:      {
        -: 1234:        discardCard(handPos, currentPlayer, state, 0);
        -: 1235:      }
        -: 1236:      //draw 4
        -: 1237:      for (i = 0; i < 4; i++)
        -: 1238:      {
        -: 1239:        drawCard(currentPlayer, state);
        -: 1240:      }
        -: 1241:      //other players discard hand and redraw if hand size > 4
        -: 1242:      for (i = 0; i < state->numPlayers; i++)
        -: 1243:      {
        -: 1244:        if (i != currentPlayer)
        -: 1245:        {
        -: 1246:          if (state->handCount[i] > 4)
        -: 1247:          {
        -: 1248:            //discard hand
        -: 1249:            while (state->handCount[i] > 0)
        -: 1250:            {
        -: 1251:              discardCard(handPos, i, state, 0);
        -: 1252:            }
        -: 1253:            //draw 4
        -: 1254:            for (j = 0; j < 4; j++)
        -: 1255:            {
        -: 1256:              drawCard(i, state);
        -: 1257:            }
        -: 1258:          }
        -: 1259:        }
        -: 1260:      }
        -: 1261:    }
        -: 1262:    return 0;
        -: 1263:    */
        -: 1264:
        -: 1265:  case steward:
    #####: 1266:    if (choice1 == 1)
        -: 1267:    {
        -: 1268:      //+2 cards
    #####: 1269:      drawCard(currentPlayer, state);
    #####: 1270:      drawCard(currentPlayer, state);
        -: 1271:    }
    #####: 1272:    else if (choice1 == 2)
        -: 1273:    {
        -: 1274:      //+2 coins
    #####: 1275:      state->coins = state->coins + 2;
        -: 1276:    }
        -: 1277:    else
        -: 1278:    {
        -: 1279:      //trash 2 cards in hand
    #####: 1280:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1281:      discardCard(choice3, currentPlayer, state, 1);
        -: 1282:    }
        -: 1283:
        -: 1284:    //discard card from hand
    #####: 1285:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1286:    return 0;
        -: 1287:
        -: 1288:  case tribute:
    #####: 1289:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1290:    {
    #####: 1291:      if (state->deckCount[nextPlayer] > 0)
        -: 1292:      {
    #####: 1293:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1294:        state->deckCount[nextPlayer]--;
        -: 1295:      }
    #####: 1296:      else if (state->discardCount[nextPlayer] > 0)
        -: 1297:      {
    #####: 1298:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1299:        state->discardCount[nextPlayer]--;
        -: 1300:      }
        -: 1301:      else
        -: 1302:      {
        -: 1303:        //No Card to Reveal
        -: 1304:        if (DEBUG)
        -: 1305:        {
        -: 1306:          printf("No cards to reveal\n");
        -: 1307:        }
        -: 1308:      }
        -: 1309:    }
        -: 1310:
        -: 1311:    else
        -: 1312:    {
    #####: 1313:      if (state->deckCount[nextPlayer] == 0)
        -: 1314:      {
    #####: 1315:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1316:        {
    #####: 1317:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1318:          state->deckCount[nextPlayer]++;
    #####: 1319:          state->discard[nextPlayer][i] = -1;
    #####: 1320:          state->discardCount[nextPlayer]--;
        -: 1321:        }
        -: 1322:
    #####: 1323:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1324:      }
    #####: 1325:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1326:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1327:      state->deckCount[nextPlayer]--;
    #####: 1328:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1329:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1330:      state->deckCount[nextPlayer]--;
        -: 1331:    }
        -: 1332:
    #####: 1333:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1334:    { //If we have a duplicate card, just drop one
    #####: 1335:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1336:      state->playedCardCount++;
    #####: 1337:      tributeRevealedCards[1] = -1;
        -: 1338:    }
        -: 1339:
    #####: 1340:    for (i = 0; i <= 2; i++)
        -: 1341:    {
    #####: 1342:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1343:      { //Treasure cards
    #####: 1344:        state->coins += 2;
        -: 1345:      }
        -: 1346:
    #####: 1347:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1348:      { //Victory Card Found
    #####: 1349:        drawCard(currentPlayer, state);
    #####: 1350:        drawCard(currentPlayer, state);
        -: 1351:      }
        -: 1352:      else
        -: 1353:      { //Action Card
    #####: 1354:        state->numActions = state->numActions + 2;
        -: 1355:      }
        -: 1356:    }
        -: 1357:
    #####: 1358:    return 0;
        -: 1359:
        -: 1360:  case ambassador:
    #####: 1361:    return ambassadorCard(i, j, choice1, choice2, handPos, state, currentPlayer);
        -: 1362:    /*j = 0; //used to check if player has enough cards to discard
        -: 1363:    if (choice2 > 2 || choice2 < 0)
        -: 1364:    {
        -: 1365:      return -1;
        -: 1366:    }
        -: 1367:    if (choice1 == handPos)
        -: 1368:    {
        -: 1369:      return -1;
        -: 1370:    }
        -: 1371:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1372:    {
        -: 1373:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1374:      {
        -: 1375:        j++;
        -: 1376:      }
        -: 1377:    }
        -: 1378:    if (j < choice2)
        -: 1379:    {
        -: 1380:      return -1;
        -: 1381:    }
        -: 1382:    if (DEBUG)
        -: 1383:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1384:    //increase supply count for choosen card by amount being discarded
        -: 1385:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1386:    //each other player gains a copy of revealed card
        -: 1387:    for (i = 0; i < state->numPlayers; i++)
        -: 1388:    {
        -: 1389:      if (i != currentPlayer)
        -: 1390:      {
        -: 1391:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1392:      }
        -: 1393:    }
        -: 1394:    //discard played card from hand
        -: 1395:    discardCard(handPos, currentPlayer, state, 0);
        -: 1396:    //trash copies of cards returned to supply
        -: 1397:    for (j = 0; j < choice2; j++)
        -: 1398:    {
        -: 1399:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1400:      {
        -: 1401:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1402:        {
        -: 1403:          discardCard(i, currentPlayer, state, 1);
        -: 1404:          break;
        -: 1405:        }
        -: 1406:      }
        -: 1407:    }
        -: 1408:    return 0;
        -: 1409:    */
        -: 1410:
        -: 1411:  case cutpurse:
        -: 1412:
    #####: 1413:    updateCoins(currentPlayer, state, 2);
    #####: 1414:    for (i = 0; i < state->numPlayers; i++)
        -: 1415:    {
    #####: 1416:      if (i != currentPlayer)
        -: 1417:      {
    #####: 1418:        for (j = 0; j < state->handCount[i]; j++)
        -: 1419:        {
    #####: 1420:          if (state->hand[i][j] == copper)
        -: 1421:          {
    #####: 1422:            discardCard(j, i, state, 0);
    #####: 1423:            break;
        -: 1424:          }
    #####: 1425:          if (j == state->handCount[i])
        -: 1426:          {
    #####: 1427:            for (k = 0; k < state->handCount[i]; k++)
        -: 1428:            {
        -: 1429:              if (DEBUG)
        -: 1430:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1431:            }
    #####: 1432:            break;
        -: 1433:          }
        -: 1434:        }
        -: 1435:      }
        -: 1436:    }
        -: 1437:
        -: 1438:    //discard played card from hand
    #####: 1439:    discardCard(handPos, currentPlayer, state, 0);
        -: 1440:
    #####: 1441:    return 0;
        -: 1442:
        -: 1443:  case embargo:
        -: 1444:    //+2 Coins
    #####: 1445:    state->coins = state->coins + 2;
        -: 1446:
        -: 1447:    //see if selected pile is in play
    #####: 1448:    if (state->supplyCount[choice1] == -1)
        -: 1449:    {
    #####: 1450:      return -1;
        -: 1451:    }
        -: 1452:
        -: 1453:    //add embargo token to selected supply pile
    #####: 1454:    state->embargoTokens[choice1]++;
        -: 1455:
        -: 1456:    //trash card
    #####: 1457:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1458:    return 0;
        -: 1459:
        -: 1460:  case outpost:
    #####: 1461:    return outpostCard(handPos, currentPlayer, state);
        -: 1462:    /*
        -: 1463:    //set outpost flag
        -: 1464:    state->outpostPlayed++;
        -: 1465:    //discard card
        -: 1466:    discardCard(handPos, currentPlayer, state, 0);
        -: 1467:    return 0;
        -: 1468:    */
        -: 1469:
        -: 1470:  case salvager:
        -: 1471:    //+1 buy
    #####: 1472:    state->numBuys++;
        -: 1473:
    #####: 1474:    if (choice1)
        -: 1475:    {
        -: 1476:      //gain coins equal to trashed card
    #####: 1477:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1478:      //trash card
    #####: 1479:      discardCard(choice1, currentPlayer, state, 1);
        -: 1480:    }
        -: 1481:
        -: 1482:    //discard card
    #####: 1483:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1484:    return 0;
        -: 1485:
        -: 1486:  case sea_hag:
    #####: 1487:    for (i = 0; i < state->numPlayers; i++)
        -: 1488:    {
    #####: 1489:      if (i != currentPlayer)
        -: 1490:      {
    #####: 1491:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1492:        state->deckCount[i]--;
    #####: 1493:        state->discardCount[i]++;
    #####: 1494:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1495:      }
        -: 1496:    }
    #####: 1497:    return 0;
        -: 1498:
        -: 1499:  case treasure_map:
        -: 1500:    //search hand for another treasure_map
    #####: 1501:    index = -1;
    #####: 1502:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1503:    {
    #####: 1504:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1505:      {
    #####: 1506:        index = i;
    #####: 1507:        break;
        -: 1508:      }
        -: 1509:    }
    #####: 1510:    if (index > -1)
        -: 1511:    {
        -: 1512:      //trash both treasure cards
    #####: 1513:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1514:      discardCard(index, currentPlayer, state, 1);
        -: 1515:
        -: 1516:      //gain 4 Gold cards
    #####: 1517:      for (i = 0; i < 4; i++)
        -: 1518:      {
    #####: 1519:        gainCard(gold, state, 1, currentPlayer);
        -: 1520:      }
        -: 1521:
        -: 1522:      //return success
    #####: 1523:      return 1;
        -: 1524:    }
        -: 1525:
        -: 1526:    //no second treasure_map found in hand
    #####: 1527:    return -1;
        -: 1528:  }
        -: 1529:
    #####: 1530:  return -1;
        -: 1531:}
        -: 1532:
        3: 1533:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1534:{
        -: 1535:
        -: 1536:  //if card is not trashed, added to Played pile
        3: 1537:  if (trashFlag < 1)
        -: 1538:  {
        -: 1539:    //add card to played pile
        3: 1540:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1541:    state->playedCardCount++;
        -: 1542:  }
        -: 1543:
        -: 1544:  //set played card to -1
        3: 1545:  state->hand[currentPlayer][handPos] = -1;
        -: 1546:
        -: 1547:  //remove card from player's hand
        3: 1548:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1549:  {
        -: 1550:    //reduce number of cards in hand
    #####: 1551:    state->handCount[currentPlayer]--;
        -: 1552:  }
        3: 1553:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1554:  {
        -: 1555:    //reduce number of cards in hand
    #####: 1556:    state->handCount[currentPlayer]--;
        -: 1557:  }
        -: 1558:  else
        -: 1559:  {
        -: 1560:    //replace discarded card with last card in hand
        3: 1561:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1562:    //set last card to -1
        3: 1563:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1564:    //reduce number of cards in hand
        3: 1565:    state->handCount[currentPlayer]--;
        -: 1566:  }
        -: 1567:
        3: 1568:  return 0;
        -: 1569:}
        -: 1570:
    #####: 1571:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1572:{
        -: 1573:  //Note: supplyPos is enum of choosen card
        -: 1574:
        -: 1575:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1576:  if (supplyCount(supplyPos, state) < 1)
        -: 1577:  {
    #####: 1578:    return -1;
        -: 1579:  }
        -: 1580:
        -: 1581:  //added card for [whoseTurn] current player:
        -: 1582:  // toFlag = 0 : add to discard
        -: 1583:  // toFlag = 1 : add to deck
        -: 1584:  // toFlag = 2 : add to hand
        -: 1585:
    #####: 1586:  if (toFlag == 1)
        -: 1587:  {
    #####: 1588:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1589:    state->deckCount[player]++;
        -: 1590:  }
    #####: 1591:  else if (toFlag == 2)
        -: 1592:  {
    #####: 1593:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1594:    state->handCount[player]++;
        -: 1595:  }
        -: 1596:  else
        -: 1597:  {
    #####: 1598:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1599:    state->discardCount[player]++;
        -: 1600:  }
        -: 1601:
        -: 1602:  //decrease number in supply pile
    #####: 1603:  state->supplyCount[supplyPos]--;
        -: 1604:
    #####: 1605:  return 0;
        -: 1606:}
        -: 1607:
        9: 1608:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1609:{
        -: 1610:  int i;
        -: 1611:
        -: 1612:  //reset coin count
        9: 1613:  state->coins = 0;
        -: 1614:
        -: 1615:  //add coins for each Treasure card in player's hand
       54: 1616:  for (i = 0; i < state->handCount[player]; i++)
        -: 1617:  {
       45: 1618:    if (state->hand[player][i] == copper)
        -: 1619:    {
       36: 1620:      state->coins += 1;
        -: 1621:    }
        9: 1622:    else if (state->hand[player][i] == silver)
        -: 1623:    {
    #####: 1624:      state->coins += 2;
        -: 1625:    }
        9: 1626:    else if (state->hand[player][i] == gold)
        -: 1627:    {
    #####: 1628:      state->coins += 3;
        -: 1629:    }
        -: 1630:  }
        -: 1631:
        -: 1632:  //add bonus
        9: 1633:  state->coins += bonus;
        -: 1634:
        9: 1635:  return 0;
        -: 1636:}
        -: 1637:
        -: 1638://end of dominion.c
        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
function main called 1 returned 100% blocks executed 72%
        1:    8:int main(){
        -:    9:	int r;
        1:   10:	int passFlag = 0;
        1:   11:	int seed = 1000;
        1:   12:	int numPlayer = 2;
        1:   13:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   14:				remodel, smithy, village, baron, great_hall};
        -:   15:	struct gameState G;
        -:   16:	//initialize game
        1:   17:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        1:   18:	printf("\nUnit Test 1: supplyCount Function\n");
call    0 returned 100%
        1:   19:	printf("Testing with 2 players\n");
call    0 returned 100%
        -:   20:
        -:   21:	//Check supplyCount for Kingdom Cards: adventurer and numPlayer set to 2, should return 10
        1:   22:	r = supplyCount(adventurer, &G);
call    0 returned 100%
        1:   23:	printf("adventurer supplyCount expected: 10, actual: %d\n", r);
call    0 returned 100%
        1:   24:	if (r == 10)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   25:		printf("supplyCount test PASSED\n");
call    0 returned 100%
        -:   26:	else{
    #####:   27:		printf("supplyCount test FAILED\n");
call    0 never executed
    #####:   28:		passFlag = -1;
        -:   29:	}
        -:   30:
        -:   31:	//Check supplyCount for Kingdom Cards: great_hall and numPlayer set to 2, should return 8
        1:   32:	r = supplyCount(great_hall, &G);
call    0 returned 100%
        1:   33:	printf("great_hall supplyCount expected: 8, actual: %d\n", r);
call    0 returned 100%
        1:   34:	if (r == 8)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   35:		printf("supplyCount test PASSED\n");
call    0 returned 100%
        -:   36:	else{
    #####:   37:		printf("supplyCount test FAILED\n");
call    0 never executed
    #####:   38:		passFlag = -1;
        -:   39:	}
        -:   40:
        -:   41:	//Check supplyCount for Kingdom Cards: feast (not in current set being played) and numPlayer set to 2, should return -1
        1:   42:	r = supplyCount(outpost, &G);
call    0 returned 100%
        1:   43:	printf("feast supplyCount expected: -1, actual: %d\n", r);
call    0 returned 100%
        1:   44:	if (r == -1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   45:		printf("supplyCount test PASSED\n");
call    0 returned 100%
        -:   46:	else{
    #####:   47:		printf("supplyCount test FAILED\n");
call    0 never executed
    #####:   48:		passFlag = -1;
        -:   49:	}
        -:   50:
        -:   51:	//Test with numPlayer set to 4
        1:   52:	numPlayer = 4;
        -:   53:	struct gameState G2;
        -:   54:	//initialize game
        1:   55:	initializeGame(numPlayer, k, seed, &G2);
call    0 returned 100%
        1:   56:	printf("Testing with 4 players\n");
call    0 returned 100%
        -:   57:
        -:   58:	//Check supplyCount for Kingdom Cards: adventurer and numPlayer set to 4, should still return 10
        1:   59:	r = supplyCount(adventurer, &G2);
call    0 returned 100%
        1:   60:	printf("adventurer supplyCount expected: 10, actual: %d\n", r);
call    0 returned 100%
        1:   61:	if (r == 10)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   62:		printf("supplyCount test PASSED\n");
call    0 returned 100%
        -:   63:	else{
    #####:   64:		printf("supplyCount test FAILED\n");
call    0 never executed
    #####:   65:		passFlag = -1;
        -:   66:	}
        -:   67:
        -:   68:	//Check supplyCount for Kingdom Cards: great_hall and numPlayer set to 4, should return 12
        1:   69:	r = supplyCount(great_hall, &G2);
call    0 returned 100%
        1:   70:	printf("great_hall supplyCount expected: 12, actual: %d\n", r);
call    0 returned 100%
        1:   71:	if (r == 12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   72:		printf("supplyCount test PASSED\n");
call    0 returned 100%
        -:   73:	else{
    #####:   74:		printf("supplyCount test FAILED\n");
call    0 never executed
    #####:   75:		passFlag = -1;
        -:   76:	}
        -:   77:
        -:   78:	//Check supplyCount for Kingdom Cards: feast (not in current set being played) and numPlayer set to 4, should return -1
        1:   79:	r = supplyCount(outpost, &G2);
call    0 returned 100%
        1:   80:	printf("feast supplyCount expected: -1, actual: %d\n", r);
call    0 returned 100%
        1:   81:	if (r == -1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   82:		printf("supplyCount test PASSED\n");
call    0 returned 100%
        -:   83:	else{
    #####:   84:		printf("supplyCount test FAILED\n");
call    0 never executed
    #####:   85:		passFlag = -1;
        -:   86:	}
        -:   87:
        -:   88:	//Report if test case has passed all steps or not
        1:   89:	if (passFlag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   90:		printf("Unit Test 1: supplyCount Function: PASSED\n");
call    0 returned 100%
        -:   91:	else
    #####:   92:		printf("Unit Test 1: supplyCount Function: FAILED\n");
call    0 never executed
        -:   93:
        -:   94:}
        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
function main called 1 returned 100% blocks executed 72%
        1:    8:int main(){
        -:    9:	int r;
        1:   10:	int passFlag = 0;
        1:   11:	int seed = 1000;
        1:   12:	int numPlayer = 2;
        1:   13:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   14:				remodel, smithy, village, baron, great_hall};
        -:   15:	struct gameState G;
        -:   16:	//initialize game
        1:   17:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        1:   18:	printf("\nUnit Test 2: isGameOver Function\n");
call    0 returned 100%
        1:   19:	printf("Testing with 2 players\n");
call    0 returned 100%
        -:   20:
        -:   21:	//just started game, expect that it's not already over
        1:   22:	r = isGameOver(&G);
call    0 returned 100%
        1:   23:	printf("isGameOver just started game expected: 0, actual: %d\n", r);
call    0 returned 100%
        1:   24:	if (r == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   25:		printf("isGameOver test PASSED\n");
call    0 returned 100%
        -:   26:	else{
    #####:   27:		printf("isGameOver test FAILED\n");
call    0 never executed
    #####:   28:		passFlag = -1;
        -:   29:	}
        -:   30:
        -:   31:	//set province supply count to 0, this means the game should be over
        1:   32:	G.supplyCount[province] = 0;
        1:   33:	r = isGameOver(&G);
call    0 returned 100%
        1:   34:	printf("isGameOver province supply count = 0 expected: 1, actual: %d\n", r);
call    0 returned 100%
        1:   35:	if (r == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   36:		printf("isGameOver test PASSED\n");
call    0 returned 100%
        -:   37:	else{
    #####:   38:		printf("isGameOver test FAILED\n");
call    0 never executed
    #####:   39:		passFlag = -1;
        -:   40:	}
        -:   41:
        -:   42:	//reset province supply count to 1, this means the game is back on
        1:   43:	G.supplyCount[province] = 1;
        1:   44:	r = isGameOver(&G);
call    0 returned 100%
        1:   45:	printf("isGameOver province supply count = 1 expected: 0, actual: %d\n", r);
call    0 returned 100%
        1:   46:	if (r == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   47:		printf("isGameOver test PASSED\n");
call    0 returned 100%
        -:   48:	else{
    #####:   49:		printf("isGameOver test FAILED\n");
call    0 never executed
    #####:   50:		passFlag = -1;
        -:   51:	}
        -:   52:
        -:   53:	//test if 3 supply count piles are at 0, not province
        1:   54:	G.supplyCount[adventurer] = 0;
        1:   55:	G.supplyCount[council_room] = 0;
        1:   56:	G.supplyCount[feast] = 0;
        1:   57:	r = isGameOver(&G);
call    0 returned 100%
        1:   58:	printf("isGameOver 3 supply count piles are at 0 expected: 1, actual: %d\n", r);
call    0 returned 100%
        1:   59:	if (r == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   60:		printf("isGameOver test PASSED\n");
call    0 returned 100%
        -:   61:	else{
    #####:   62:		printf("isGameOver test FAILED\n");
call    0 never executed
    #####:   63:		passFlag = -1;
        -:   64:	}
        -:   65:
        -:   66:	//report if test case passed or failed
        1:   67:	if (passFlag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   68:		printf("Unit Test 2: isGameOver Function: PASSED\n");
call    0 returned 100%
        -:   69:	else
    #####:   70:		printf("Unit Test 2: isGameOver Function: FAILED\n");
call    0 never executed
        -:   71:
        -:   72:}
        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
function main called 1 returned 100% blocks executed 75%
        1:    8:int main(){
        -:    9:	int r;
        1:   10:	int passFlag = 0;
        1:   11:	int seed = 1000;
        1:   12:	int numPlayer = 2;
        1:   13:	int player1 = 0;
        1:   14:	int player2 = 1;
        1:   15:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   16:				remodel, smithy, village, baron, great_hall};
        -:   17:	struct gameState G;
        -:   18:	//initialize game
        1:   19:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        1:   20:	printf("\nUnit Test 3: whoseTurn Function\n");
call    0 returned 100%
        1:   21:	printf("Testing with 2 players\n");
call    0 returned 100%
        -:   22:
        -:   23:	//game starts with player1 turn
        1:   24:	r = whoseTurn(&G);
call    0 returned 100%
        1:   25:	printf("whoseTurn just started game expected: 0, actual: %d\n", r);
call    0 returned 100%
        1:   26:	if (r == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   27:		printf("whoseTurn test PASSED\n");
call    0 returned 100%
        -:   28:	else{
    #####:   29:		printf("whoseTurn test FAILED\n");
call    0 never executed
    #####:   30:		passFlag = -1;
        -:   31:	}
        -:   32:
        -:   33:	//set to player2 turn
        1:   34:	G.whoseTurn = player2;
        1:   35:	r = whoseTurn(&G);
call    0 returned 100%
        1:   36:	printf("whoseTurn set to player2 expected: 1, actual: %d\n", r);
call    0 returned 100%
        1:   37:	if (r == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   38:		printf("whoseTurn test PASSED\n");
call    0 returned 100%
        -:   39:	else{
    #####:   40:		printf("whoseTurn test FAILED\n");
call    0 never executed
    #####:   41:		passFlag = -1;
        -:   42:	}
        -:   43:
        -:   44:	//report if testcase passed or failed
        1:   45:	if (passFlag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   46:		printf("Unit Test 3: whoseTurn Function: PASSED\n");
call    0 returned 100%
        -:   47:	else
    #####:   48:		printf("Unit Test 3: whoseTurn Function: FAILED\n");
call    0 never executed
        -:   49:
        -:   50:}
        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
function main called 1 returned 100% blocks executed 75%
        1:    8:int main(){
        -:    9:	int r;
        1:   10:	int passFlag = 0;
        1:   11:	int seed = 1000;
        1:   12:	int numPlayer = 2;
        1:   13:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   14:				remodel, smithy, village, baron, great_hall};
        -:   15:	struct gameState G;
        -:   16:	//initialize game
        1:   17:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        1:   18:	printf("\nUnit Test 4: getCost Function\n");
call    0 returned 100%
        1:   19:	printf("Testing with 2 players\n");
call    0 returned 100%
        -:   20:
        -:   21:	//get cost of adventurer
        1:   22:	r = getCost(adventurer);
call    0 returned 100%
        1:   23:	printf("getCost of adventurer expected: 6, actual: %d\n", r);
call    0 returned 100%
        1:   24:	if (r == 6)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   25:		printf("getCost test PASSED\n");
call    0 returned 100%
        -:   26:	else{
    #####:   27:		printf("getCost test FAILED\n");
call    0 never executed
    #####:   28:		passFlag = -1;
        -:   29:	}
        -:   30:
        -:   31:	//get cost of card not in current Kingdom card set
        1:   32:	r = getCost(outpost);
call    0 returned 100%
        1:   33:	printf("getCost of outpost expected: 5, actual: %d\n", r);
call    0 returned 100%
        1:   34:	if (r == 5)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   35:		printf("getCost test PASSED\n");
call    0 returned 100%
        -:   36:	else{
    #####:   37:		printf("getCost test FAILED\n");
call    0 never executed
    #####:   38:		passFlag = -1;
        -:   39:	}
        -:   40:
        -:   41:	//report if testcase passed or failed
        1:   42:	if (passFlag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   43:		printf("Unit Test 4: getCost Function: PASSED\n");
call    0 returned 100%
        -:   44:	else
    #####:   45:		printf("Unit Test 4: getCost Function: FAILED\n");
call    0 never executed
        -:   46:}
        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
function main called 1 returned 100% blocks executed 80%
        1:   10:int main(){
        -:   11:	int r;
        1:   12:	int passFlag = 0;
        1:   13:	int seed = 1000;
        1:   14:	int numPlayer = 2;
        1:   15:	int thisPlayer = 0;
        1:   16:	int playerTwo = 1;
        1:   17:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:				remodel, smithy, village, baron, great_hall};
        -:   19:	struct gameState G;
        -:   20:	struct gameState testG;
        -:   21:
        -:   22:
        1:   23:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   24:
        -:   25:	//initialize game
        1:   26:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   27:	//copy the game state to a test case
        1:   28:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   29:
        1:   30:	printf("\nCard Test 1: smithy\n");
call    0 returned 100%
        1:   31:	printf("Testing with 2 players\n");
call    0 returned 100%
        -:   32:
        -:   33:	//Expect to receive 3 cards, run cardEffect
        1:   34:	int addedCards = 3;
        -:   35:
        1:   36:	cardEffect(smithy, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   37:
        1:   38:	printf("Correct Number of Cards Added\n:");
call    0 returned 100%
        1:   39:	printf("Expected hand count = %d\n", testG.handCount[thisPlayer] + addedCards);
call    0 returned 100%
        1:   40:	printf("Actual hand count = %d\n", G.handCount[thisPlayer]);
call    0 returned 100%
        1:   41:	if (G.handCount[thisPlayer] == testG.handCount[thisPlayer] + addedCards)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   42:		printf("PASSED\n");
call    0 returned 100%
        -:   43:	else{
    #####:   44:		printf("FAILED\n");
call    0 never executed
    #####:   45:		passFlag = 1;
        -:   46:	}
        -:   47:
        -:   48:	//Check that players deck has decreased by 3 cards, it came from own pile
        1:   49:	printf("Correct Number of Cards Removed From Player Pile\n:");
call    0 returned 100%
        1:   50:	printf("Expected deck count = %d\n", testG.deckCount[thisPlayer] - addedCards);
call    0 returned 100%
        1:   51:	printf("Actual deck count = %d\n", G.deckCount[thisPlayer]);
call    0 returned 100%
        1:   52:	if (G.deckCount[thisPlayer] == testG.deckCount[thisPlayer] - addedCards)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:		printf("PASSED\n");
call    0 never executed
        -:   54:	else{
        1:   55:		printf("FAILED\n");
call    0 returned 100%
        1:   56:		passFlag = 1;
        -:   57:	}
        -:   58:
        -:   59:	//Check that one card was discarded
        1:   60:	printf("Card Discarded After Use:\n");
call    0 returned 100%
        1:   61:	printf("Expected discard count = %d\n", 1);
call    0 returned 100%
        1:   62:	printf("Actual discard count = %d\n", G.discardCount[thisPlayer]);
call    0 returned 100%
        1:   63:	if (G.discardCount[thisPlayer] == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   64:		printf("PASSED\n");
call    0 never executed
        -:   65:	else{
        1:   66:		printf("FAILED\n");
call    0 returned 100%
        1:   67:		passFlag = 1;
        -:   68:	}
        -:   69:
        -:   70:
        -:   71:	//Check no change in other player's state hand count
        1:   72:	printf("Check State of Other Player, Hand Count\n:");
call    0 returned 100%
        1:   73:	printf("Expected hand count = %d\n", testG.handCount[playerTwo]);
call    0 returned 100%
        1:   74:	printf("Actual hand count = %d\n", G.handCount[playerTwo]);
call    0 returned 100%
        1:   75:	if (G.handCount[playerTwo] == testG.handCount[playerTwo])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   76:		printf("PASSED\n");
call    0 returned 100%
        -:   77:	else{
    #####:   78:		printf("FAILED\n");
call    0 never executed
    #####:   79:		passFlag = 1;
        -:   80:	}
        -:   81:
        -:   82:
        -:   83:	//Check no change in other player's state deck count
        1:   84:	printf("Check State of Other Player, Deck Count\n:");
call    0 returned 100%
        1:   85:	printf("Expected deck count = %d\n", testG.deckCount[playerTwo]);
call    0 returned 100%
        1:   86:	printf("Actual deck count = %d\n", G.deckCount[playerTwo]);
call    0 returned 100%
        1:   87:	if (G.deckCount[playerTwo] == testG.deckCount[playerTwo])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   88:		printf("PASSED\n");
call    0 returned 100%
        -:   89:	else{
    #####:   90:		printf("FAILED\n");
call    0 never executed
    #####:   91:		passFlag = 1;
        -:   92:	}
        -:   93:
        -:   94:
        1:   95:	printf("Card Test 1: smithy result: ");
call    0 returned 100%
        1:   96:	if (passFlag == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   97:		printf("PASSED\n");
call    0 never executed
        -:   98:	else
        1:   99:		printf("FAILED\n");
call    0 returned 100%
        -:  100:
        1:  101:	return 0;
        -:  102:
        -:  103:}
        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
function main called 1 returned 100% blocks executed 78%
        1:   10:int main(){
        -:   11:	int r;
        1:   12:	int passFlag = 0;
        1:   13:	int seed = 1000;
        1:   14:	int numPlayer = 2;
        1:   15:	int thisPlayer = 0;
        1:   16:	int playerTwo = 1;
        1:   17:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:				remodel, smithy, village, baron, great_hall};
        -:   19:	struct gameState G;
        -:   20:	struct gameState testG;
        -:   21:
        -:   22:
        1:   23:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   24:
        -:   25:	//initialize game
        1:   26:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   27:	//copy the game state to a test case
        1:   28:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   29:
        1:   30:	printf("\nCard Test 2: adventurer\n");
call    0 returned 100%
        1:   31:	printf("Testing with 2 players\n");
call    0 returned 100%
        -:   32:
        -:   33:	//Expect to receive 2 treasure cards, run cardEffect
        1:   34:	int expectedTresureCards = 2;
        -:   35:
        1:   36:	cardEffect(adventurer, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   37:
        1:   38:	printf("Correct Number of Cards Added\n:");
call    0 returned 100%
        1:   39:	printf("Expected hand count = %d\n", testG.handCount[thisPlayer] + expectedTresureCards);
call    0 returned 100%
        1:   40:	printf("Actual hand count = %d\n", G.handCount[thisPlayer]);
call    0 returned 100%
        1:   41:	if (G.handCount[thisPlayer] == testG.handCount[thisPlayer] + expectedTresureCards)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   42:		printf("PASSED\n");
call    0 never executed
        -:   43:	else{
        1:   44:		printf("FAILED\n");
call    0 returned 100%
        1:   45:		passFlag = 1;
        -:   46:	}
        -:   47:
        -:   48:	//tally treasure cards for both game states
        1:   49:	int i = 0;
        1:   50:	int j = 0;
        1:   51:	int treasureCount = 0;
        1:   52:	int treasureCountTestG = 0;
        -:   53:
        1:   54:	for (i = 0; i < G.handCount[thisPlayer]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   55:		if (G.hand[thisPlayer][i] == copper || G.hand[thisPlayer][i] == silver || G.hand[thisPlayer][i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   56:			treasureCount++;
        -:   57:	}
        -:   58:
        6:   59:	for (j = 0; j < testG.handCount[thisPlayer]; j++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   60:		if (testG.hand[thisPlayer][j] == copper || testG.hand[thisPlayer][j] == silver || testG.hand[thisPlayer][j] == gold)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   61:			treasureCountTestG++;
        -:   62:	}
        -:   63:
        -:   64:
        1:   65:	printf("Correct Number of Tresure Cards Added\n:");
call    0 returned 100%
        1:   66:	printf("Expected treasure count = %d\n", treasureCountTestG + 2);
call    0 returned 100%
        1:   67:	printf("Actual treasure count = %d\n", treasureCount);
call    0 returned 100%
        1:   68:	if (treasureCount == treasureCountTestG + 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   69:		printf("PASSED\n");
call    0 never executed
        -:   70:	else{
        1:   71:		printf("FAILED\n");
call    0 returned 100%
        1:   72:		passFlag = 1;
        -:   73:	}
        -:   74:
        -:   75:
        -:   76:
        -:   77:
        -:   78:	//Check that players deck has decreased by 2 cards, it came from own pile
        1:   79:	printf("Correct Number of Cards Removed From Player Pile\n:");
call    0 returned 100%
        1:   80:	printf("Expected deck count = %d\n", testG.deckCount[thisPlayer] - expectedTresureCards);
call    0 returned 100%
        1:   81:	printf("Actual deck count = %d\n", G.deckCount[thisPlayer]);
call    0 returned 100%
        1:   82:	if (G.deckCount[thisPlayer] == testG.deckCount[thisPlayer] - expectedTresureCards)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   83:		printf("PASSED\n");
call    0 never executed
        -:   84:	else{
        1:   85:		printf("FAILED\n");
call    0 returned 100%
        1:   86:		passFlag = 1;
        -:   87:	}
        -:   88:
        -:   89:
        -:   90:
        -:   91:	//Check no change in other player's state hand count
        1:   92:	printf("Check State of Other Player, Hand Count\n:");
call    0 returned 100%
        1:   93:	printf("Expected hand count = %d\n", testG.handCount[playerTwo]);
call    0 returned 100%
        1:   94:	printf("Actual hand count = %d\n", G.handCount[playerTwo]);
call    0 returned 100%
        1:   95:	if (G.handCount[playerTwo] == testG.handCount[playerTwo])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   96:		printf("PASSED\n");
call    0 returned 100%
        -:   97:	else{
    #####:   98:		printf("FAILED\n");
call    0 never executed
    #####:   99:		passFlag = 1;
        -:  100:	}
        -:  101:
        -:  102:
        -:  103:	//Check no change in other player's state deck count
        1:  104:	printf("Check State of Other Player, Deck Count\n:");
call    0 returned 100%
        1:  105:	printf("Expected deck count = %d\n", testG.deckCount[playerTwo]);
call    0 returned 100%
        1:  106:	printf("Actual deck count = %d\n", G.deckCount[playerTwo]);
call    0 returned 100%
        1:  107:	if (G.deckCount[playerTwo] == testG.deckCount[playerTwo])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  108:		printf("PASSED\n");
call    0 returned 100%
        -:  109:	else{
    #####:  110:		printf("FAILED\n");
call    0 never executed
    #####:  111:		passFlag = 1;
        -:  112:	}
        -:  113:
        -:  114:
        1:  115:	printf("Card Test 2: adventurer result: ");
call    0 returned 100%
        1:  116:	if (passFlag == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  117:		printf("PASSED\n");
call    0 never executed
        -:  118:	else
        1:  119:		printf("FAILED\n");
call    0 returned 100%
        -:  120:
        1:  121:	return 0;
        -:  122:
        -:  123:}
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
function main called 1 returned 100% blocks executed 81%
        1:   10:int main(){
        -:   11:	int r;
        1:   12:	int passFlag = 0;
        1:   13:	int seed = 1000;
        1:   14:	int numPlayer = 2;
        1:   15:	int thisPlayer = 0;
        1:   16:	int playerTwo = 1;
        1:   17:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:				remodel, smithy, village, baron, great_hall};
        -:   19:	struct gameState G;
        -:   20:	struct gameState testG;
        -:   21:
        -:   22:
        1:   23:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   24:
        -:   25:	//initialize game
        1:   26:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   27:	//copy the game state to a test case
        1:   28:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   29:
        1:   30:	printf("\nCard Test 3: village\n");
call    0 returned 100%
        1:   31:	printf("Testing with 2 players\n");
call    0 returned 100%
        -:   32:
        -:   33:	//Expect to receive 1 card and 2 actions, run cardEffect
        1:   34:	int addedCards = 1;
        1:   35:	int addedActions = 2;
        -:   36:
        1:   37:	cardEffect(village, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   38:
        1:   39:	printf("Correct Number of Cards Added\n:");
call    0 returned 100%
        1:   40:	printf("Expected hand count = %d\n", testG.handCount[thisPlayer] + addedCards);
call    0 returned 100%
        1:   41:	printf("Actual hand count = %d\n", G.handCount[thisPlayer]);
call    0 returned 100%
        1:   42:	if (G.handCount[thisPlayer] == testG.handCount[thisPlayer] + addedCards)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   43:		printf("PASSED\n");
call    0 never executed
        -:   44:	else{
        1:   45:		printf("FAILED\n");
call    0 returned 100%
        1:   46:		passFlag = 1;
        -:   47:	}
        -:   48:
        -:   49:	//Check that players deck has decreased by 1 cards, it came from own pile
        1:   50:	printf("Correct Number of Cards Removed From Player Pile\n:");
call    0 returned 100%
        1:   51:	printf("Expected deck count = %d\n", testG.deckCount[thisPlayer] - addedCards);
call    0 returned 100%
        1:   52:	printf("Actual deck count = %d\n", G.deckCount[thisPlayer]);
call    0 returned 100%
        1:   53:	if (G.deckCount[thisPlayer] == testG.deckCount[thisPlayer] - addedCards)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:		printf("PASSED\n");
call    0 returned 100%
        -:   55:	else{
    #####:   56:		printf("FAILED\n");
call    0 never executed
    #####:   57:		passFlag = 1;
        -:   58:	}
        -:   59:
        -:   60:	//Check that 2 actions added
        1:   61:	int GNumActions = G.numActions;
        1:   62:	int testGNumActions = testG.numActions;
        -:   63:
        1:   64:	printf("Correct Number of Actions Added\n:");
call    0 returned 100%
        1:   65:	printf("Expected actions count = %d\n", testGNumActions + 2);
call    0 returned 100%
        1:   66:	printf("Actual actions count = %d\n", GNumActions);
call    0 returned 100%
        1:   67:	if (GNumActions == testGNumActions)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   68:		printf("PASSED\n");
call    0 never executed
        -:   69:	else{
        1:   70:		printf("FAILED\n");
call    0 returned 100%
        1:   71:		passFlag = 1;
        -:   72:	}
        -:   73:
        -:   74:	//Check that one card was discarded
        1:   75:	printf("Card Discarded After Use:\n");
call    0 returned 100%
        1:   76:	printf("Expected discard count = %d\n", 1);
call    0 returned 100%
        1:   77:	printf("Actual discard count = %d\n", G.discardCount[thisPlayer]);
call    0 returned 100%
        1:   78:	if (G.discardCount[thisPlayer] == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   79:		printf("PASSED\n");
call    0 never executed
        -:   80:	else{
        1:   81:		printf("FAILED\n");
call    0 returned 100%
        1:   82:		passFlag = 1;
        -:   83:	}
        -:   84:
        -:   85:
        -:   86:	//Check no change in other player's state hand count
        1:   87:	printf("Check State of Other Player, Hand Count\n:");
call    0 returned 100%
        1:   88:	printf("Expected hand count = %d\n", testG.handCount[playerTwo]);
call    0 returned 100%
        1:   89:	printf("Actual hand count = %d\n", G.handCount[playerTwo]);
call    0 returned 100%
        1:   90:	if (G.handCount[playerTwo] == testG.handCount[playerTwo])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   91:		printf("PASSED\n");
call    0 returned 100%
        -:   92:	else{
    #####:   93:		printf("FAILED\n");
call    0 never executed
    #####:   94:		passFlag = 1;
        -:   95:	}
        -:   96:
        -:   97:
        -:   98:	//Check no change in other player's state deck count
        1:   99:	printf("Check State of Other Player, Deck Count\n:");
call    0 returned 100%
        1:  100:	printf("Expected deck count = %d\n", testG.deckCount[playerTwo]);
call    0 returned 100%
        1:  101:	printf("Actual deck count = %d\n", G.deckCount[playerTwo]);
call    0 returned 100%
        1:  102:	if (G.deckCount[playerTwo] == testG.deckCount[playerTwo])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  103:		printf("PASSED\n");
call    0 returned 100%
        -:  104:	else{
    #####:  105:		printf("FAILED\n");
call    0 never executed
    #####:  106:		passFlag = 1;
        -:  107:	}
        -:  108:
        -:  109:
        1:  110:	printf("Card Test 3: village result: ");
call    0 returned 100%
        1:  111:	if (passFlag == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  112:		printf("PASSED\n");
call    0 never executed
        -:  113:	else
        1:  114:		printf("FAILED\n");
call    0 returned 100%
        -:  115:
        1:  116:	return 0;
        -:  117:
        -:  118:}
        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
function main called 1 returned 100% blocks executed 81%
        1:   10:int main(){
        -:   11:	int r;
        1:   12:	int passFlag = 0;
        1:   13:	int seed = 1000;
        1:   14:	int numPlayer = 2;
        1:   15:	int thisPlayer = 0;
        1:   16:	int playerTwo = 1;
        1:   17:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:				remodel, smithy, village, baron, great_hall};
        -:   19:	struct gameState G;
        -:   20:	struct gameState testG;
        -:   21:
        -:   22:
        1:   23:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   24:
        -:   25:	//initialize game
        1:   26:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   27:	//copy the game state to a test case
        1:   28:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   29:
        1:   30:	printf("\nCard Test 4: great_hall\n");
call    0 returned 100%
        1:   31:	printf("Testing with 2 players\n");
call    0 returned 100%
        -:   32:
        -:   33:	//Expect to receive 1 card and 1 action, run cardEffect
        1:   34:	int addedCards = 1;
        1:   35:	int addedActions = 1;
        -:   36:
        1:   37:	cardEffect(great_hall, choice1, choice2, choice3, &G, handpos, &bonus);
call    0 returned 100%
        -:   38:
        1:   39:	printf("Correct Number of Cards Added\n:");
call    0 returned 100%
        1:   40:	printf("Expected hand count = %d\n", testG.handCount[thisPlayer] + addedCards);
call    0 returned 100%
        1:   41:	printf("Actual hand count = %d\n", G.handCount[thisPlayer]);
call    0 returned 100%
        1:   42:	if (G.handCount[thisPlayer] == testG.handCount[thisPlayer] + addedCards)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   43:		printf("PASSED\n");
call    0 never executed
        -:   44:	else{
        1:   45:		printf("FAILED\n");
call    0 returned 100%
        1:   46:		passFlag = 1;
        -:   47:	}
        -:   48:
        -:   49:	//Check that players deck has decreased by 1 cards, it came from own pile
        1:   50:	printf("Correct Number of Cards Removed From Player Pile\n:");
call    0 returned 100%
        1:   51:	printf("Expected deck count = %d\n", testG.deckCount[thisPlayer] - addedCards);
call    0 returned 100%
        1:   52:	printf("Actual deck count = %d\n", G.deckCount[thisPlayer]);
call    0 returned 100%
        1:   53:	if (G.deckCount[thisPlayer] == testG.deckCount[thisPlayer] - addedCards)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:		printf("PASSED\n");
call    0 returned 100%
        -:   55:	else{
    #####:   56:		printf("FAILED\n");
call    0 never executed
    #####:   57:		passFlag = 1;
        -:   58:	}
        -:   59:
        -:   60:	//Check that 1 action added
        1:   61:	int GNumActions = G.numActions;
        1:   62:	int testGNumActions = testG.numActions;
        -:   63:
        1:   64:	printf("Correct Number of Actions Added\n:");
call    0 returned 100%
        1:   65:	printf("Expected actions count = %d\n", testGNumActions + 1);
call    0 returned 100%
        1:   66:	printf("Actual actions count = %d\n", GNumActions);
call    0 returned 100%
        1:   67:	if (GNumActions == testGNumActions)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   68:		printf("PASSED\n");
call    0 never executed
        -:   69:	else{
        1:   70:		printf("FAILED\n");
call    0 returned 100%
        1:   71:		passFlag = 1;
        -:   72:	}
        -:   73:
        -:   74:	//Check that one card was discarded
        1:   75:	printf("Card Discarded After Use:\n");
call    0 returned 100%
        1:   76:	printf("Expected discard count = %d\n", 1);
call    0 returned 100%
        1:   77:	printf("Actual discard count = %d\n", G.discardCount[thisPlayer]);
call    0 returned 100%
        1:   78:	if (G.discardCount[thisPlayer] == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   79:		printf("PASSED\n");
call    0 never executed
        -:   80:	else{
        1:   81:		printf("FAILED\n");
call    0 returned 100%
        1:   82:		passFlag = 1;
        -:   83:	}
        -:   84:
        -:   85:
        -:   86:	//Check no change in other player's state hand count
        1:   87:	printf("Check State of Other Player, Hand Count\n:");
call    0 returned 100%
        1:   88:	printf("Expected hand count = %d\n", testG.handCount[playerTwo]);
call    0 returned 100%
        1:   89:	printf("Actual hand count = %d\n", G.handCount[playerTwo]);
call    0 returned 100%
        1:   90:	if (G.handCount[playerTwo] == testG.handCount[playerTwo])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   91:		printf("PASSED\n");
call    0 returned 100%
        -:   92:	else{
    #####:   93:		printf("FAILED\n");
call    0 never executed
    #####:   94:		passFlag = 1;
        -:   95:	}
        -:   96:
        -:   97:
        -:   98:	//Check no change in other player's state deck count
        1:   99:	printf("Check State of Other Player, Deck Count\n:");
call    0 returned 100%
        1:  100:	printf("Expected deck count = %d\n", testG.deckCount[playerTwo]);
call    0 returned 100%
        1:  101:	printf("Actual deck count = %d\n", G.deckCount[playerTwo]);
call    0 returned 100%
        1:  102:	if (G.deckCount[playerTwo] == testG.deckCount[playerTwo])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  103:		printf("PASSED\n");
call    0 returned 100%
        -:  104:	else{
    #####:  105:		printf("FAILED\n");
call    0 never executed
    #####:  106:		passFlag = 1;
        -:  107:	}
        -:  108:
        -:  109:
        1:  110:	printf("Card Test 4: great_hall result: ");
call    0 returned 100%
        1:  111:	if (passFlag == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  112:		printf("PASSED\n");
call    0 never executed
        -:  113:	else
        1:  114:		printf("FAILED\n");
call    0 returned 100%
        -:  115:
        1:  116:	return 0;
        -:  117:
        -:  118:}
